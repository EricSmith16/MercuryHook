/**
 * 
 * Author Float
 * idea from Ad on Discord server
 * 
 **/ 

#include "../modules/framework/SDK.h"
#include "../Header/ItemExploit.h"

CItem gItem;

struct ItemEntity
{
    void std::vector<ItemEntity>(false, -1);
    std::vector->GetItemHeader(this + std::vector<ItemEntity>(this, -1), 0);
     if(!ItemEntity->GetItemHeader() struct ItemEntity(false), 0)
     {
         std::vector(CBaseEntity* pEntity, GetItemEntity, pItemEntity);
         std::ItemEntity->item.entity_hat;

         if(item.entity_hat = NULL)
         return -1;

         if(item.entity_hat == true)
         return 1;
    
    
        void::std_vector(ItemEntity->item_entity_true)
         {
            !ItemEntity->item_entity_hat(this , 1);
            struct item_Entity_hat
            {
                playerX  = host;
                playerY = enemy;
                
                FindHatEntity = CBaseEntity, pItemEntity;
                HatEntity(std::vector<HatEntity>(this ,1) (void HatEntity_ItemEntity), Get::Global::Interface(player x, player y, bool player x, bool, player y));
                
                if(Global::Interface->PlayerX(CBaseEntity* pEntity), false, false, false, false)
                return -1;

                GetHatEntity* pItemEntity;
            };
         }
         
         for (var = s.ItemEntity('HatEntity' + CBaseEntity), Get::Global::Interface() return -1)
         {
             if (var == NULL)
             return NULL;

             else if (var == 1)
             return var;

             for (ItemEntity->HatEntity.sin_family){
                 ItemEntity = CBaseEntity* pEntity, pItemEntity;
                 
                 bool Get::ItemEntity();
                 bool Get::HatEntity::PlayerX();

             }
            return var;
         }

         // Find HatEntity
         if(HatEntity->ItemEntity_Head)
         {
             Get::HatItemInfo(struct HatItem)
             if(!HatItem->GetAllClasses_HeadItem)
             {
                 GetAllClasses(ItemEntity + BestHitBox);
                 struct GetAllClasses

                 for(ItemEntity == Get::Global::Interface::Item);
                  
                 if (Global::Interface::Item->class_hat_item)
                 return -1;
             }
         }


     }
};

